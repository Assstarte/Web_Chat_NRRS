{"version":3,"sources":["components/ChatMessage.jsx","components/Inputs.jsx","actions/f_msgs_and_rooms.js","actions/types.js","components/FixedDashboard.jsx","components/Chat.jsx","components/Home.jsx","actions/login.js","components/ChatRoom.jsx","components/RoomScreen.jsx","actions/chat.js","reducers/loginReducer.js","reducers/fetchReducer.js","reducers/chatReducer.js","reducers/index.js","store.js","components/Login.jsx","components/Signup.jsx","App.js","serviceWorker.js","index.js"],"names":["ChatMessage","state","nick","_this","props","data","message","time","createdAt","timeStamp","this","slice","react_default","a","createElement","className","Component","Inputs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputNameRef","React","createRef","inputTextRef","sendMessage","bind","assertThisInitialized","_this2","console","log","currentRoom","name","ref","id","placeholder","onClick","e","sendMessageToChatRoom","value","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","text","current","then","res","json","catch","chatRoom","concat","chatRoomId","userId","user_name","connect","rooms","errorOccurred","roomScreen","msgScreen","chat","login","user_id","exec_fetch_rooms","dispatch","type","payload","FixedDashboard","_ref","screenType","functionToExec","Fragment","style","display","color","Chat","intervalID","components_FixedDashboard","redirectToRoomScreen","messages","map","msg","components_ChatMessage","key","components_Inputs","loggedIn","history","push","exec_fetch_messages","chatWindow","document","querySelector","messageAmount","length","info","scrollTo","Number","MAX_SAFE_INTEGER","loopedCheck","top","left","options","roomId","setInterval","clearInterval","Home","textAlign","redirectToLogin","redirectToSignup","exec_whoami","auth","preventDefault","ChatRoom","owner","enterRoom","aria-hidden","data-prefix","data-icon","role","xmlns","viewBox","fill","d","RoomScreen","exec_flush_current_room","createNewRoom","room","components_ChatRoom","owner_name","setCurrentRoom","exec_set_current_room","roomName","creator","creatorName","components_RoomScreen","initialState","theme","combineReducers","arguments","undefined","action","server_response","objectSpread","created","session","persistedState","localStorage","getItem","parse","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","Login","inputLoginRef","inputPassRef","execute_login","window","location","href","autoFocus","required","exec_login","pass","password","Signup","execute_signup","exec_signup","App","es","Router","createHistory","Switch","Route","path","component","getState","exact","subscribe","setItem","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVA6BeA,0NAzBbC,MAAQ,CACNC,KAAMC,EAAKC,MAAMC,KAAKH,KACtBI,QAASH,EAAKC,MAAMC,KAAKC,QACzBC,KAAMJ,EAAKC,MAAMC,KAAKG,mFAItB,IAAIC,EAAYC,KAAKT,MAAMM,KAAKI,MAAM,GAAI,IAE1C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUL,KAAKT,MAAMC,MADvC,IACqD,MAClDQ,KAAKT,MAAMK,QAAS,IACrBM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACb,QACAN,IAGLG,EAAAC,EAAAC,cAAA,mBApBkBE,qCCEpBC,cACJ,SAAAA,IAAc,IAAAd,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAR,KAAAO,IACZd,EAAAe,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAZ,QAMFT,MAAQ,GALNE,EAAKoB,aAAeC,IAAMC,YAC1BtB,EAAKuB,aAAeF,IAAMC,YAC1BtB,EAAKwB,YAAcxB,EAAKwB,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAf,KAJPA,wEAQL,IAAA2B,EAAApB,KAEP,OADAqB,QAAQC,IAAI,eAAiBtB,KAAKN,MAAM6B,aAEtCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,YACEoB,KAAK,OACLC,IAAKzB,KAAKgB,aACVU,GAAG,UACHC,YAAY,qBAEdzB,EAAAC,EAAAC,cAAA,UACEC,UAAU,qBACVuB,QAAS,SAAAC,GAAC,OAAIT,EAAKU,sBAAsBD,EAAGT,EAAK1B,MAAM6B,cACvDQ,MAAM,QAHR,+CAWMF,GACVG,MAAM,eAAgB,CACpBC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAEnBC,KAAMxC,KAAKgB,aAAayB,QAAQV,UAKjCW,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,KAAK,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,OAC/CE,MAAM,SAASF,GACdtB,QAAQC,IAAIqB,mDAIId,EAAGiB,GACvBd,MAAK,qBAAAe,OAAsBD,GAAY,CACrCb,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAEnBC,KAAMxC,KAAKgB,aAAayB,QAAQV,MAChCiB,WAAYF,EACZG,OAAQjD,KAAKN,MAAMuD,OACnBC,UAAWlD,KAAKN,MAAMwD,cAKvBR,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,KAAK,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,OAC/CE,MAAM,SAASF,GACdtB,QAAQC,IAAIqB,YArECrC,aAoFN6C,cAVS,SAAA5D,GAAK,MAAK,CAChC6D,MAAO7D,EAAMyC,MAAMoB,MACnBC,cAAe9D,EAAMyC,MAAMqB,cAC3BC,WAAY/D,EAAMyC,MAAMsB,WACxBC,UAAWhE,EAAMyC,MAAMuB,UACvBhC,YAAahC,EAAMiE,KAAKjC,YACxB0B,OAAQ1D,EAAMkE,MAAMC,QACpBR,UAAW3D,EAAMkE,MAAMP,YAKvB,GAFaC,CAGb5C,GC1FWoD,EAAmB,kBAAM,SAAAC,GACpC5B,MAAM,aAAc,CAClBC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,QACPM,KAAK,SAAAC,GAAG,OACTA,EACGC,OACAF,KAAK,SAAA/C,GAAI,OACRiE,EAAS,CACPC,KCbqB,kBDcrBC,QAASnE,MAGZkD,MAAM,SAAAF,GACLiB,EAAS,CACPC,KCZoB,iBDapBC,QAASnB,UEiBJoB,SAnCQ,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,UAAWe,EAAdD,EAAcC,WAAYC,EAA1BF,EAA0BE,eAA1B,OACrBhE,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,SAAP,KACEjE,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,cACNxB,EAAAC,EAAAC,cAAA,MAAIgE,MAAO,CAAEC,QAAO,cAAiBC,MAAK,SAA1C,0BACqBpB,GAEL,SAAfe,EACC/D,EAAAC,EAAAC,cAAA,UACEwB,QAC4B,oBAAnBsC,EACH,SAAArC,GAAC,OAAIqC,EAAerC,IACpB,SAAAA,GAAC,OAAIR,QAAQC,IAAI,wCAEvBjB,UAAU,mBANZ,eAWAH,EAAAC,EAAAC,cAAA,UACEwB,QAC4B,oBAAnBsC,EACH,SAAArC,GAAC,OAAIqC,EAAerC,IACpB,SAAAA,GAAC,OAAIR,QAAQC,IAAI,wCAEvBjB,UAAU,mBANZ,mBAWFH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAlB,WAEFH,EAAAC,EAAAC,cAAA,cCrBEmE,cACJ,SAAAA,EAAY7E,GAAO,IAAAD,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAR,KAAAuE,IACjB9E,EAAAe,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAA+D,GAAA3D,KAAAZ,KAAMN,KACD6B,YAAc9B,EAAKC,MAAM6B,YAC9B9B,EAAK+E,WAAa,KAHD/E,wEAOjB,OACES,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,SAAP,KACEjE,EAAAC,EAAAC,cAACqE,EAAD,CACEvB,UAAWlD,KAAKN,MAAMwD,UACtBe,WAAW,OACXC,eAAgBlE,KAAK0E,qBAAqBxD,KAAKlB,QAEjDE,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,QACL1B,KAAKN,MAAMiF,SAASC,IAAI,SAAAC,GAAG,OAC1B3E,EAAAC,EAAAC,cAAC0E,EAAD,CAAaC,IAAKF,EAAInD,GAAI/B,KAAMkF,OAGpC3E,EAAAC,EAAAC,cAAC4E,EAAD,oDAMChF,KAAKN,MAAMuF,UAAUjF,KAAKN,MAAMwF,QAAQC,KAAK,UAClDnF,KAAKN,MAAM0F,oBAAoBpF,KAAKN,MAAM6B,yDAI1CvB,KAAKqF,WAAaC,SAASC,cAAc,SACzCvF,KAAKwF,cAAgBxF,KAAKN,MAAMiF,SAASc,OACzCpE,QAAQqE,KAAK,YAAc1F,KAAKwF,eAChCxF,KAAKqF,WAAWM,SAAS,EAAGC,OAAOC,kBAEnC7F,KAAKwE,WAAaxE,KAAK8F,YAAY9F,KAAKN,MAAM6B,0DAK1CvB,KAAKN,MAAMiF,SAASc,OAASzF,KAAKwF,gBACpCxF,KAAKwF,gBACLxF,KAAKqF,WAAWM,SAAS,CACvBI,IAAKH,OAAOC,iBACZG,KAAM,EACNC,QAAO,gDAKDC,GAKV,OAJiBC,YACfnG,KAAKN,MAAM0F,oBAAoBlE,KAAKlB,KAAMkG,GAC1C,oDAOFE,cAAcpG,KAAKwE,YACnBxE,KAAKN,MAAMwF,QAAQC,KAAK,iBA9DT7E,aA6EJ6C,cAXS,SAAA5D,GAAK,MAAK,CAChC6D,MAAO7D,EAAMyC,MAAMoB,MACnBuB,SAAUpF,EAAMyC,MAAM2C,SACtBtB,cAAe9D,EAAMyC,MAAMqB,cAC3BC,WAAY/D,EAAMyC,MAAMsB,WACxBC,UAAWhE,EAAMyC,MAAMuB,UACvBhC,YAAahC,EAAMiE,KAAKjC,YACxB2B,UAAW3D,EAAMkE,MAAMP,UACvB+B,SAAU1F,EAAMkE,MAAMwB,WAKtB,CAAEG,oBHjE+B,SAAAc,GAAM,OAAI,SAAAtC,GAC3C5B,MAAK,gBAAAe,OAAiBmD,GAAU,CAC9BjE,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,QACPM,KAAK,SAAAC,GAAG,OACTA,EACGC,OACAF,KAAK,SAAA/C,GAAI,OACRiE,EAAS,CACPC,KCvCoB,iBDwCpBC,QAASnE,MAGZkD,MAAM,SAAAF,GACLiB,EAAS,CACPC,KCrCoB,iBDsCpBC,QAASnB,UG8CMgB,oBAFVR,CAGboB,GCtFI8B,mLACK,IAAA5G,EAAAO,KACP,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MACEgE,MAAO,CACLE,MAAO,OACPgC,UAAW,WAHf,eAQApG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKgE,MAAO,CAAEkC,UAAW,WACvBpG,EAAAC,EAAAC,cAAA,UACEwB,QAAS,SAAAC,GAAC,OAAIpC,EAAK8G,gBAAgB1E,IACnCxB,UAAU,mCAFZ,SAMAH,EAAAC,EAAAC,cAAA,UACEwB,QAAS,SAAAC,GAAC,OAAIpC,EAAK+G,iBAAiB3E,IACpCxB,UAAU,oCAFZ,0DAYNL,KAAKN,MAAM+G,2DAIXzG,KAAKN,MAAMgH,KACP1G,KAAKN,MAAMwF,QAAQC,KAAK,UACxB9D,QAAQC,IAAI,yDAGFO,GACdA,EAAE8E,iBACF3G,KAAKN,MAAMwF,QAAQC,KAAK,mDAGTtD,GACfA,EAAE8E,iBACF3G,KAAKN,MAAMwF,QAAQC,KAAK,kBAhDT7E,aA0DJ6C,cANS,SAAA5D,GAAK,MAAK,CAChCmH,KAAMnH,EAAMkE,MAAMwB,SAClB5B,cAAe9D,EAAMkE,MAAMJ,cAC3BK,QAASnE,EAAMkE,MAAMC,UAKrB,CAAE+C,YCPuB,kBAAM,SAAA7C,GAC/B5B,MAAM,eAAeU,KAAK,SAAAC,GAAG,OAC3BA,EAAIC,OAAOF,KAAK,SAAA/C,GAAI,OAClBiE,EAAS,CACPC,KJzDc,SI0DdC,QAASnE,WDAFwD,CAGbkD,GE1CaO,EAvBE,SAAA5C,GAAA,IAAGxC,EAAHwC,EAAGxC,KAAMqF,EAAT7C,EAAS6C,MAAOC,EAAhB9C,EAAgB8C,UAAhB,OACf5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAamB,GAC7BtB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBuB,QAASkF,GAC5C5G,EAAAC,EAAAC,cAAA,OACE2G,cAAY,OACZC,cAAY,MACZC,YAAU,YACV5G,UAAU,sCACV6G,KAAK,MACLC,MAAM,6BACNC,QAAQ,eAERlH,EAAAC,EAAAC,cAAA,QACEiH,KAAK,eACLC,EAAE,yVAIRpH,EAAAC,EAAAC,cAAA,sBAAcyG,KCNZU,+LAGFvH,KAAKN,MAAM8H,0BACXxH,KAAKN,MAAMiE,+DAIX3D,KAAKN,MAAM8H,uEAIXxH,KAAKN,MAAM6B,YACPvB,KAAKN,MAAMwF,QAAQC,KAAK,SACxB9D,QAAQC,IAAI,gDAGT,IAAA7B,EAAAO,KACP,OACEE,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,SAAP,KACEjE,EAAAC,EAAAC,cAACqE,EAAD,CACEvB,UAAWlD,KAAKN,MAAMwD,UACtBgB,eAAgBlE,KAAKyH,cAAcvG,KAAKlB,KAAMA,KAAKN,MAAMwD,aAG3DhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MACEgE,MAAO,CACLE,MAAO,OACPgC,UAAW,WAHf,WAQApG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKgE,MAAO,CAAEkC,UAAW,SAAUhC,MAAO,SACvCjD,QAAQC,IAAItB,KAAKN,MAAM0D,OACvBpD,KAAKN,MAAM0D,MAAMwB,IAAI,SAAA8C,GAAI,OACxBxH,EAAAC,EAAAC,cAACuH,EAAD,CACEnG,KAAMkG,EAAKlG,KACXuD,IAAK2C,EAAKhG,GACVmF,MAAOa,EAAKE,WACZd,UAAWrH,EAAKoI,eAAe3G,KAAKzB,EAAMiI,EAAKhG,kDAS9CgG,GACb1H,KAAKN,MAAMoI,sBAAsBJ,yCAGrBK,GACZ/F,MAAM,aAAc,CAClBC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBf,KAAMuG,EACNC,QAAShI,KAAKN,MAAMgE,QACpBuE,YAAajI,KAAKN,MAAMwD,cAGzBR,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,KAAK,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,OAC/CE,MAAM,SAASF,GACdtB,QAAQC,IAAIqB,YAtEKrC,aAsFzB4H,EAAe/E,YAXS,SAAA5D,GAAK,MAAK,CAChC6D,MAAO7D,EAAMyC,MAAMoB,MACnBC,cAAe9D,EAAMyC,MAAMqB,cAC3BC,WAAY/D,EAAMyC,MAAMsB,WACxBC,UAAWhE,EAAMyC,MAAMuB,UACvBhC,YAAahC,EAAMiE,KAAKjC,YACxB0D,SAAU1F,EAAMkE,MAAMwB,SACtB/B,UAAW3D,EAAMkE,MAAMP,UACvBQ,QAASnE,EAAMkE,MAAMC,UAKrB,CAAEC,mBAAkBmE,sBCtGe,SAAA5B,GAAM,OAAI,SAAAtC,GAC7CA,EAAS,CACPC,KPO4B,mBON5BC,QAASoC,MDmGgCsB,wBC/FN,kBAAM,SAAA5D,GAC3CA,EAAS,CACPC,KPF8B,0BM6FlC,CAGE0D,mEEvGIY,EAAe,CACnBlD,UAAU,EACV5B,eAAe,EACfK,QAAS,KACTR,UAAW,MCAPiF,EAAe,CACnB7E,YAAY,EACZC,WAAW,EACXH,MAAO,GACPuB,SAAU,GACVtB,eAAe,GCTX8E,EAAe,CACnB5G,YAAa,KACb6G,MAAO,QCCMC,cAAgB,CAC7B5E,MHGa,WAAuC,IAA9BlE,EAA8B+I,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAtBH,EAAcK,EAAQF,UAAA7C,OAAA,EAAA6C,UAAA,QAAAC,EACpD,OAAQC,EAAO3E,MACb,IRTiB,QQUf,IAAI4E,EAAkBD,EAAO1E,QAE7B,OAAiC,IAA7B2E,EAAgBxD,SACXzE,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,EACfK,QAAS+E,EAAgB/G,GACzBwB,UAAWuF,EAAgBhF,QAKtBjD,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,EACfK,QAAS,OAIf,IR9BkB,SQ+BhB,OAAI8E,EAAO1E,QAAQ6E,QACVnI,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,IAGjB7C,OAAAkI,EAAA,EAAAlI,CAAA,GACKjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,IAGrB,IRxCkB,SQ0ChB,OADAhC,QAAQC,IAAIkH,EAAO1E,SACY,WAA3B0E,EAAO1E,QAAQ8E,SACjBvH,QAAQC,IAAI,WACLd,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,EACfK,QAAS8E,EAAO1E,QAAQpC,GACxBwB,UAAWsF,EAAO1E,QAAQL,SAGrBjD,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE0F,UAAU,EACV5B,eAAe,EACfK,QAAS,OAIf,QACE,OAAOnE,IG7DXyC,MFOa,WAAuC,IAChDyG,EADkBlJ,EAA8B+I,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAtBH,EAAcK,EAAQF,UAAA7C,OAAA,EAAA6C,UAAA,QAAAC,EAEpD,OAAQC,EAAO3E,MACb,IThB2B,kBSqBzB,OAJAxC,QAAQC,IAAIkH,EAAO1E,SACnB2E,EAAkBD,EAAO1E,QACzBzC,QAAQC,IAAImH,GAERA,EACKjI,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE6D,MAAOqF,EACPpF,eAAe,EACfE,WAAW,EACXD,YAAY,IAKP9C,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE+D,YAAY,EACZD,eAAe,EACfE,WAAW,IAIjB,ITzC0B,iBS6CxB,OAHAkF,EAAkBD,EAAO1E,SAIhBtD,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEEoF,SAAU8D,EACVpF,eAAe,EACfE,WAAW,EACXD,YAAY,IAKP9C,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEE+D,YAAY,EACZD,eAAe,EACfE,WAAW,IAIjB,QACE,OAAOhE,IEzDXiE,KDDF,WAAsD,IAA9BjE,EAA8B+I,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAtBH,EAAcK,EAAQF,UAAA7C,OAAA,EAAA6C,UAAA,QAAAC,EACpD,OAAQC,EAAO3E,MACb,IVE4B,mBUC1B,OAFAxC,QAAQC,IAAIkH,EAAO1E,SAEZtD,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEEgC,YAAaiH,EAAO1E,UAGxB,IVR8B,qBUS5B,OAAOtD,OAAAkI,EAAA,EAAAlI,CAAA,GACFjB,EADL,CAEEgC,YAAa,OAGjB,QACE,OAAOhC,MEpBPsJ,EAAiBC,aAAaC,QAAQ,cACxCzG,KAAK0G,MAAMF,aAAaC,QAAQ,eAChC,GAEEE,EAAa,CAACC,KAQLC,EANDC,YACZC,EACAR,EACAS,IAAeC,WAAf,EAAmBN,ICPfO,qBACJ,SAAAA,EAAY9J,GAAO,IAAAD,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAR,KAAAwJ,IACjB/J,EAAAe,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAgJ,GAAA5I,KAAAZ,KAAMN,KACD+J,cAAgB3I,IAAMC,YAC3BtB,EAAKiK,aAAe5I,IAAMC,YAC1BtB,EAAKkK,cAAgBlK,EAAKkK,cAAczI,KAAnBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAf,KAJJA,oFAQjBO,KAAKN,MAAMuF,SACN2E,OAAOC,SAASC,KAAO,SACxBzI,QAAQC,IAAI,8DAGT,IAAAF,EAAApB,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaqB,GAAG,OAAOU,OAAO,QAC5ClC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACEqB,IAAKzB,KAAKyJ,cACV5F,KAAK,OACLrC,KAAK,KACLnB,UAAU,iBACV0J,WAAS,EACTC,UAAQ,EACRrI,YAAY,QACZD,GAAG,eAELxB,EAAAC,EAAAC,cAAA,SACEqB,IAAKzB,KAAK0J,aACV7F,KAAK,WACLrC,KAAK,KACLnB,UAAU,iBACV2J,UAAQ,EACRrI,YAAY,WACZD,GAAG,cAELxB,EAAAC,EAAAC,cAAA,SACEyD,KAAK,SACLrC,KAAK,QACLO,MAAM,QACN1B,UAAU,eACVqB,GAAG,cACHE,QAAS,SAAAC,GAAC,OAAIT,EAAKuI,cAAc9H,OAGrC3B,EAAAC,EAAAC,cAAA,KAAG0J,KAAK,IAAIzJ,UAAU,qBAAtB,oBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0DAKPwB,GACZA,EAAE8E,iBACFtF,QAAQC,IAAI,YACZtB,KAAKN,MAAMuK,WACTjK,KAAKyJ,cAAchH,QAAQV,MAC3B/B,KAAK0J,aAAajH,QAAQV,cA7DZzB,cAwEL6C,cANS,SAAA5D,GAAK,MAAK,CAChC0F,SAAU1F,EAAMkE,MAAMwB,SACtB5B,cAAe9D,EAAMkE,MAAMJ,cAC3BK,QAASnE,EAAMkE,MAAMC,UAKrB,CAAEuG,WT9EsB,SAACxG,EAAOyG,GAAR,OAAiB,SAAAtG,GACzC5B,MAAM,aAAc,CAClBC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBkB,MAAOA,EACP0G,SAAUD,MAEXxH,KAAK,SAAAC,GAAG,OACTA,EACGC,OACAF,KAAK,SAAA/C,GAAI,OACRiE,EAAS,CACPC,KJhBW,QIiBXC,QAASnE,MAGZkD,MAAM,SAAAF,GACLiB,EAAS,CACPC,KJhBoB,iBIiBpBC,QAASnB,WSqDJQ,CAGbqG,GC3EIY,cACJ,SAAAA,EAAY1K,GAAO,IAAAD,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAR,KAAAoK,IACjB3K,EAAAe,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAA4J,GAAAxJ,KAAAZ,KAAMN,KACD+J,cAAgB3I,IAAMC,YAC3BtB,EAAKiK,aAAe5I,IAAMC,YAC1BtB,EAAK4K,eAAiB5K,EAAK4K,eAAenJ,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAf,KAJLA,oFAQjBO,KAAKN,MAAMuF,SACN2E,OAAOC,SAASC,KAAO,SACxBzI,QAAQC,IAAI,8DAGT,IAAAF,EAAApB,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaqB,GAAG,OAAOU,OAAO,QAC5ClC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACEqB,IAAKzB,KAAKyJ,cACV5F,KAAK,OACLrC,KAAK,KACLnB,UAAU,iBACV0J,WAAS,EACTC,UAAQ,EACRrI,YAAY,QACZD,GAAG,eAELxB,EAAAC,EAAAC,cAAA,SACEqB,IAAKzB,KAAK0J,aACV7F,KAAK,WACLrC,KAAK,KACLnB,UAAU,iBACV2J,UAAQ,EACRrI,YAAY,WACZD,GAAG,cAELxB,EAAAC,EAAAC,cAAA,SACEyD,KAAK,SACLrC,KAAK,SACLO,MAAM,SACN1B,UAAU,eACVqB,GAAG,cACHE,QAAS,SAAAC,GAAC,OAAIT,EAAKiJ,eAAexI,OAGtC3B,EAAAC,EAAAC,cAAA,KAAG0J,KAAK,IAAIzJ,UAAU,qBAAtB,oBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DAKNwB,GACbA,EAAE8E,iBACFtF,QAAQC,IAAI,YACZtB,KAAKN,MAAM4K,YACTtK,KAAKyJ,cAAchH,QAAQV,MAC3B/B,KAAK0J,aAAajH,QAAQV,cA7DXzB,aAwEN6C,cANS,SAAA5D,GAAK,MAAK,CAChC0F,SAAU1F,EAAMkE,MAAMwB,SACtB5B,cAAe9D,EAAMkE,MAAMJ,cAC3BK,QAASnE,EAAMkE,MAAMC,UAKrB,CAAE4G,YVjDuB,SAAC7G,EAAOyG,GAAR,OAAiB,SAAAtG,GAC1C5B,MAAM,cAAe,CACnBC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBkB,MAAOA,EACP0G,SAAUD,MAEXxH,KAAK,SAAAC,GAAG,OACTA,EACGC,OACAF,KAAK,SAAA/C,GAAI,OACRiE,EAAS,CACPC,KJ5CY,SI6CZC,QAASnE,MAGZkD,MAAM,SAAAF,GACLiB,EAAS,CACPC,KJ7CoB,iBI8CpBC,QAASnB,WUwBJQ,CAGbiH,GC3DIG,mLAEF,OACErK,EAAAC,EAAAC,cAACoK,EAAA,EAAD,CAAUrB,MAAOA,GACfjJ,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,QACNxB,EAAAC,EAAAC,cAACqK,EAAA,EAAD,CAAQvF,QAASwF,OACfxK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuK,EAAA,EAAD,KACEzK,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CACEC,KAAK,IACLC,UACE3B,EAAM4B,WAAWtH,MAAMwB,SAAWsC,EAAalB,EAEjD2E,OAAK,IAEP9K,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWzE,IAC/BnG,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWvG,IAC/BrE,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWvD,IAChCrH,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWtB,IAChCtJ,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWV,gBAnB/B9J,aA8BlB6I,EAAM8B,UAAU,WACdnC,aAAaoC,QAAQ,aAAc5I,KAAKC,UAAU4G,EAAM4B,eAE3CR,QC3CKY,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCXNC,IAASC,OAAOrL,EAAAC,EAAAC,cAACoL,EAAD,MAASlG,SAASmG,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlJ,KAAK,SAAAmJ,GACjCA,EAAaC","file":"static/js/main.bc00d714.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/chat.css\";\n\nclass ChatMessage extends Component {\n  state = {\n    nick: this.props.data.nick,\n    message: this.props.data.message,\n    time: this.props.data.createdAt\n  };\n  render() {\n    //Parsing time\n    let timeStamp = this.state.time.slice(11, 19);\n\n    return (\n      <div className=\"chat-message\">\n        <h4>\n          <span className=\"author\">{this.state.nick}</span>:{\"   \"}\n          {this.state.message}{\" \"}\n          <span className=\"timeStamp\">\n            {\"   | \"}\n            {timeStamp}\n          </span>\n        </h4>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default ChatMessage;\n","import React, { Component } from \"react\";\nimport \"../css/chat.css\";\nimport \"../css/buttons.css\";\nimport { connect } from \"react-redux\";\n\nclass Inputs extends Component {\n  constructor() {\n    super();\n    this.inputNameRef = React.createRef();\n    this.inputTextRef = React.createRef();\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  state = {};\n  render() {\n    console.log(\"Curr Room - \" + this.props.currentRoom);\n    return (\n      <div className=\"inputs\">\n        <textarea\n          name=\"text\"\n          ref={this.inputTextRef}\n          id=\"message\"\n          placeholder=\"Enter message...\"\n        />\n        <button\n          className=\"raise send-msg-btn\"\n          onClick={e => this.sendMessageToChatRoom(e, this.props.currentRoom)} //=======CHANGE AFTER TESTING!!1\n          value=\"Send\"\n        >\n          Send >\n        </button>\n      </div>\n    );\n  }\n\n  sendMessage(e) {\n    fetch(\"/api/message\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        //time: `${new Date().getHours()}:${new Date().getMinutes()}`,\n        text: this.inputTextRef.current.value\n        //name: `Test Name`,\n        //text: `Txt`\n      })\n    })\n      .then(res => res.json().then(res => console.log(res)))\n      .catch(function(res) {\n        console.log(res);\n      });\n  }\n\n  sendMessageToChatRoom(e, chatRoom) {\n    fetch(`/api/message/room/${chatRoom}`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        //time: `${new Date().getHours()}:${new Date().getMinutes()}`,\n        text: this.inputTextRef.current.value,\n        chatRoomId: chatRoom,\n        userId: this.props.userId, //Replace to REDUX Session once implemented -- DONE\n        user_name: this.props.user_name\n        //name: `Test Name`,\n        //text: `Txt`\n      })\n    })\n      .then(res => res.json().then(res => console.log(res)))\n      .catch(function(res) {\n        console.log(res);\n      });\n  }\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.fetch.rooms,\n  errorOccurred: state.fetch.errorOccurred,\n  roomScreen: state.fetch.roomScreen,\n  msgScreen: state.fetch.msgScreen,\n  currentRoom: state.chat.currentRoom,\n  userId: state.login.user_id,\n  user_name: state.login.user_name\n});\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Inputs);\n","import { FETCH_MESSAGES, FETCH_CHATROOMS, ERROR_OCCURRED } from \"./types\";\n\nexport const exec_fetch_rooms = () => dispatch => {\n  fetch(\"/api/rooms\", {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"GET\"\n  }).then(res =>\n    res\n      .json()\n      .then(data =>\n        dispatch({\n          type: FETCH_CHATROOMS,\n          payload: data\n        })\n      )\n      .catch(res => {\n        dispatch({\n          type: ERROR_OCCURRED,\n          payload: res\n        });\n      })\n  );\n};\n\nexport const exec_fetch_messages = roomId => dispatch => {\n  fetch(`/api/message/${roomId}`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"GET\"\n  }).then(res =>\n    res\n      .json()\n      .then(data =>\n        dispatch({\n          type: FETCH_MESSAGES,\n          payload: data\n        })\n      )\n      .catch(res => {\n        dispatch({\n          type: ERROR_OCCURRED,\n          payload: res\n        });\n      })\n  );\n};\n","export const FETCH_MESSAGES = \"FETCH_MESSAGES\";\nexport const FETCH_CHATROOMS = \"FETCH_CHATROOMS\";\nexport const LOGIN = \"LOGIN\";\nexport const SIGNUP = \"SIGNUP\";\nexport const AUTH = \"AUTH\";\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\nexport const CREATE_CHATROOM = \"CREATE_CHATROOM\";\nexport const WHOAMI = \"WHOAMI\";\nexport const ERROR_OCCURRED = \"ERROR_OCCURRED\";\nexport const FLUSH_CURRENT_ROOM = \"FLUSH_CURRENT_ROOM\";\n\nexport const SET_CURRENT_ROOM = \"SET_CURRENT_ROOM\";\n","import React, { Component } from \"react\";\nimport \"../css/chatRoom.css\";\n\nconst FixedDashboard = ({ user_name, screenType, functionToExec }) => (\n  <React.Fragment>\n    <div id=\"fixed-head\">\n      <h2 style={{ display: `inlineBlock`, color: `#fff` }}>\n        $_ΣZIC > Welcome, {user_name}\n      </h2>\n      {screenType === \"chat\" ? (\n        <button\n          onClick={\n            typeof functionToExec === \"function\"\n              ? e => functionToExec(e)\n              : e => console.log(\"ERROR DURING EVENT HANDLING PASSAGE\")\n          }\n          className=\"pulse btn-login\"\n        >\n          Room Screen\n        </button>\n      ) : (\n        <button\n          onClick={\n            typeof functionToExec === \"function\"\n              ? e => functionToExec(e)\n              : e => console.log(\"ERROR DURING EVENT HANDLING PASSAGE\")\n          }\n          className=\"pulse btn-login\"\n        >\n          Create New Room\n        </button>\n      )}\n      <button className=\"raise btn-signup\">Logout</button>\n    </div>\n    <hr />\n  </React.Fragment>\n);\n\nexport default FixedDashboard;\n","import React, { Component } from \"react\";\nimport ChatMessage from \"./ChatMessage\";\nimport Inputs from \"./Inputs\";\n\n//RDX\n\nimport { connect } from \"react-redux\";\nimport {\n  exec_fetch_messages,\n  exec_fetch_rooms\n} from \"../actions/f_msgs_and_rooms\";\nimport FixedDashboard from \"./FixedDashboard\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.currentRoom = this.props.currentRoom;\n    this.intervalID = null;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <FixedDashboard\n          user_name={this.props.user_name}\n          screenType=\"chat\"\n          functionToExec={this.redirectToRoomScreen.bind(this)}\n        />\n        <div id=\"chat\">\n          {this.props.messages.map(msg => (\n            <ChatMessage key={msg.id} data={msg} />\n          ))}\n        </div>\n        <Inputs />\n      </React.Fragment>\n    );\n  }\n\n  componentWillMount() {\n    if (!this.props.loggedIn) this.props.history.push(\"/login\");\n    this.props.exec_fetch_messages(this.props.currentRoom);\n  }\n\n  componentDidMount() {\n    this.chatWindow = document.querySelector(\"#chat\");\n    this.messageAmount = this.props.messages.length;\n    console.info(\"Did Mount\" + this.messageAmount);\n    this.chatWindow.scrollTo(0, Number.MAX_SAFE_INTEGER);\n    //comment next line to test w/o issue\n    this.intervalID = this.loopedCheck(this.props.currentRoom);\n  }\n\n  componentDidUpdate() {\n    //Checking if any actual new messages were received during SQL queries ea. 1 sec. If yes ---> Scroll the chat window to bottom;\n    if (this.props.messages.length > this.messageAmount) {\n      this.messageAmount++;\n      this.chatWindow.scrollTo({\n        top: Number.MAX_SAFE_INTEGER,\n        left: 0,\n        options: `smooth`\n      });\n    }\n  }\n\n  loopedCheck(roomId) {\n    let intervalID = setInterval(\n      this.props.exec_fetch_messages.bind(this, roomId),\n      1000\n    );\n    return intervalID;\n  }\n\n  redirectToRoomScreen() {\n    //Clearing old interval to avoid multiple sessions\n    clearInterval(this.intervalID);\n    this.props.history.push(\"/rooms\");\n  }\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.fetch.rooms,\n  messages: state.fetch.messages,\n  errorOccurred: state.fetch.errorOccurred,\n  roomScreen: state.fetch.roomScreen,\n  msgScreen: state.fetch.msgScreen,\n  currentRoom: state.chat.currentRoom,\n  user_name: state.login.user_name,\n  loggedIn: state.login.loggedIn\n});\n\nexport default connect(\n  mapStateToProps,\n  { exec_fetch_messages, exec_fetch_rooms }\n)(Chat);\n","import React, { Component } from \"react\";\nimport \"../css/chat.css\";\nimport \"../css/buttons.css\";\n\nimport { exec_whoami } from \"../actions/login\";\nimport { connect } from \"react-redux\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"container demo\">\n        <h2\n          style={{\n            color: \"#fff\",\n            textAlign: \"center\"\n          }}\n        >\n          $_ΣZIC\n        </h2>\n        <hr />\n        <div style={{ textAlign: \"center\" }}>\n          <button\n            onClick={e => this.redirectToLogin(e)}\n            className=\"pulse btn-login home-screen-btn\"\n          >\n            Login\n          </button>\n          <button\n            onClick={e => this.redirectToSignup(e)}\n            className=\"raise btn-signup home-screen-btn\"\n          >\n            Sign Up\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillMount() {\n    this.props.exec_whoami();\n  }\n\n  componentDidUpdate() {\n    this.props.auth\n      ? this.props.history.push(\"/rooms\")\n      : console.log(\"Not Logged In\");\n  }\n\n  redirectToLogin(e) {\n    e.preventDefault();\n    this.props.history.push(\"/login\");\n  }\n\n  redirectToSignup(e) {\n    e.preventDefault();\n    this.props.history.push(\"/signup\");\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.login.loggedIn,\n  errorOccurred: state.login.errorOccurred,\n  user_id: state.login.user_id\n});\n\nexport default connect(\n  mapStateToProps,\n  { exec_whoami }\n)(Home);\n","import { LOGIN, AUTH, WHOAMI, ERROR_OCCURRED, SIGNUP } from \"./types\";\n\nexport const exec_login = (login, pass) => dispatch => {\n  fetch(\"/api/login\", {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      login: login,\n      password: pass\n    })\n  }).then(res =>\n    res\n      .json()\n      .then(data =>\n        dispatch({\n          type: LOGIN,\n          payload: data\n        })\n      )\n      .catch(res => {\n        dispatch({\n          type: ERROR_OCCURRED,\n          payload: res\n        });\n      })\n  );\n};\n\nexport const exec_signup = (login, pass) => dispatch => {\n  fetch(\"/api/signup\", {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      login: login,\n      password: pass\n    })\n  }).then(res =>\n    res\n      .json()\n      .then(data =>\n        dispatch({\n          type: SIGNUP,\n          payload: data\n        })\n      )\n      .catch(res => {\n        dispatch({\n          type: ERROR_OCCURRED,\n          payload: res\n        });\n      })\n  );\n};\n\nexport const exec_whoami = () => dispatch => {\n  fetch(\"/api/whoami\").then(res =>\n    res.json().then(data =>\n      dispatch({\n        type: WHOAMI,\n        payload: data\n      })\n    )\n  );\n};\n","import React, { Component } from \"react\";\nimport \"../css/chatRoom.css\";\n\nconst ChatRoom = ({ name, owner, enterRoom }) => (\n  <div className=\"chat-room\">\n    <span className=\"room-name\">{name}</span>\n    <button className=\"raise enter-room\" onClick={enterRoom}>\n      <svg\n        aria-hidden=\"true\"\n        data-prefix=\"fas\"\n        data-icon=\"door-open\"\n        className=\"svg-inline--fa fa-door-open fa-w-20\"\n        role=\"img\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 640 512\"\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M624 448h-80V113.45C544 86.19 522.47 64 496 64H384v64h96v384h144c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM312.24 1.01l-192 49.74C105.99 54.44 96 67.7 96 82.92V448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h336V33.18c0-21.58-19.56-37.41-39.76-32.17zM264 288c-13.25 0-24-14.33-24-32s10.75-32 24-32 24 14.33 24 32-10.75 32-24 32z\"\n        />\n      </svg>\n    </button>\n    <span>Owner: {owner}</span>\n  </div>\n);\n\nexport default ChatRoom;\n","import React, { Component } from \"react\";\nimport \"../css/chat.css\";\nimport \"../css/buttons.css\";\n\nimport { connect } from \"react-redux\";\nimport {\n  exec_fetch_messages,\n  exec_fetch_rooms\n} from \"../actions/f_msgs_and_rooms\";\nimport {\n  exec_set_current_room,\n  exec_flush_current_room\n} from \"../actions/chat\";\nimport ChatRoom from \"./ChatRoom\";\nimport FixedDashboard from \"./FixedDashboard\";\n\nclass RoomScreen extends Component {\n  componentWillMount() {\n    //FLUSH CURRENT ROOM SELECTION TO AVOID INSTA REDIRECTION\n    this.props.exec_flush_current_room();\n    this.props.exec_fetch_rooms();\n  }\n\n  componentDidMount() {\n    this.props.exec_flush_current_room();\n  }\n\n  componentDidUpdate() {\n    this.props.currentRoom\n      ? this.props.history.push(\"/chat\")\n      : console.log(\"Select Room\");\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <FixedDashboard\n          user_name={this.props.user_name}\n          functionToExec={this.createNewRoom.bind(this, this.props.user_name)}\n          //!!! TODO: REPLACE The roomName param with actual input from user\n        />\n        <div className=\"container demo\">\n          <h2\n            style={{\n              color: \"#fff\",\n              textAlign: \"center\"\n            }}\n          >\n            $_ROOMS\n          </h2>\n          <hr />\n          <div style={{ textAlign: \"center\", color: \"#fff\" }}>\n            {console.log(this.props.rooms)}\n            {this.props.rooms.map(room => (\n              <ChatRoom\n                name={room.name}\n                key={room.id}\n                owner={room.owner_name}\n                enterRoom={this.setCurrentRoom.bind(this, room.id)}\n              />\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  setCurrentRoom(room) {\n    this.props.exec_set_current_room(room);\n  }\n\n  createNewRoom(roomName) {\n    fetch(\"/api/rooms\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        name: roomName,\n        creator: this.props.user_id,\n        creatorName: this.props.user_name\n      })\n    })\n      .then(res => res.json().then(res => console.log(res)))\n      .catch(function(res) {\n        console.log(res);\n      });\n  }\n}\n\nconst mapStateToProps = state => ({\n  rooms: state.fetch.rooms,\n  errorOccurred: state.fetch.errorOccurred,\n  roomScreen: state.fetch.roomScreen,\n  msgScreen: state.fetch.msgScreen,\n  currentRoom: state.chat.currentRoom,\n  loggedIn: state.login.loggedIn,\n  user_name: state.login.user_name,\n  user_id: state.login.user_id\n});\n\nexport default connect(\n  mapStateToProps,\n  { exec_fetch_rooms, exec_set_current_room, exec_flush_current_room }\n)(RoomScreen);\n","import { SET_CURRENT_ROOM, FLUSH_CURRENT_ROOM } from \"./types\";\n\nexport const exec_set_current_room = roomId => dispatch => {\n  dispatch({\n    type: SET_CURRENT_ROOM,\n    payload: roomId\n  });\n};\n\nexport const exec_flush_current_room = () => dispatch => {\n  dispatch({\n    type: FLUSH_CURRENT_ROOM\n  });\n};\n","import { LOGIN, AUTH, WHOAMI, ERROR_OCCURRED, SIGNUP } from \"../actions/types\";\n\nconst initialState = {\n  loggedIn: false,\n  errorOccurred: false,\n  user_id: null,\n  user_name: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN:\n      let server_response = action.payload;\n      //SUCCESS\n      if (server_response.loggedIn === true) {\n        return {\n          ...state,\n          loggedIn: true,\n          errorOccurred: false,\n          user_id: server_response.id,\n          user_name: server_response.login\n        };\n      }\n      //ERROR\n      else {\n        return {\n          ...state,\n          loggedIn: false,\n          errorOccurred: true,\n          user_id: null\n        };\n      }\n\n    case SIGNUP:\n      if (action.payload.created) {\n        return {\n          ...state,\n          loggedIn: false,\n          errorOccurred: false\n        };\n      } else\n        return {\n          ...state,\n          loggedIn: false,\n          errorOccurred: true\n        };\n\n    case WHOAMI:\n      console.log(action.payload);\n      if (action.payload.session !== \"DENIED\") {\n        console.log(\"WORKING\");\n        return {\n          ...state,\n          loggedIn: true,\n          errorOccurred: false,\n          user_id: action.payload.id,\n          user_name: action.payload.login\n        };\n      } else {\n        return {\n          ...state,\n          loggedIn: false,\n          errorOccurred: false,\n          user_id: null\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n","import {\n  FETCH_MESSAGES,\n  FETCH_CHATROOMS,\n  ERROR_OCCURRED\n} from \"../actions/types\";\n\nconst initialState = {\n  roomScreen: true,\n  msgScreen: false,\n  rooms: [],\n  messages: [],\n  errorOccurred: false\n};\n\nexport default function(state = initialState, action) {\n  let server_response;\n  switch (action.type) {\n    case FETCH_CHATROOMS:\n      console.log(action.payload);\n      server_response = action.payload;\n      console.log(server_response);\n      //SUCCESS\n      if (server_response) {\n        return {\n          ...state,\n          rooms: server_response,\n          errorOccurred: false,\n          msgScreen: true,\n          roomScreen: false\n        };\n      }\n      //ERROR\n      else {\n        return {\n          ...state,\n          roomScreen: true,\n          errorOccurred: true,\n          msgScreen: false\n        };\n      }\n\n    case FETCH_MESSAGES:\n      server_response = action.payload;\n\n      //SUCCESS\n      if (server_response) {\n        return {\n          ...state,\n          messages: server_response,\n          errorOccurred: false,\n          msgScreen: true,\n          roomScreen: false\n        };\n      }\n      //ERROR\n      else {\n        return {\n          ...state,\n          roomScreen: false,\n          errorOccurred: true,\n          msgScreen: true\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n","import { SET_CURRENT_ROOM, FLUSH_CURRENT_ROOM } from \"../actions/types\";\n\nconst initialState = {\n  currentRoom: null,\n  theme: \"DARK\"\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_ROOM:\n      console.log(action.payload);\n      //SUCCESS\n      return {\n        ...state,\n        currentRoom: action.payload\n      };\n\n    case FLUSH_CURRENT_ROOM:\n      return {\n        ...state,\n        currentRoom: null\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport loginReducer from \"./loginReducer\";\nimport fetchReducer from \"./fetchReducer\";\nimport chatReducer from \"./chatReducer\";\n\nexport default combineReducers({\n  login: loginReducer,\n  fetch: fetchReducer,\n  chat: chatReducer\n});\n","import thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst persistedState = localStorage.getItem(\"reduxState\")\n  ? JSON.parse(localStorage.getItem(\"reduxState\"))\n  : {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport \"../css/buttons.css\";\nimport \"../css/login.css\";\nimport { exec_login } from \"../actions/login\";\n\nimport { connect } from \"react-redux\";\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.inputLoginRef = React.createRef();\n    this.inputPassRef = React.createRef();\n    this.execute_login = this.execute_login.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.props.loggedIn\n      ? (window.location.href = \"/rooms\")\n      : console.log(\"Oops! Invalid Credentials\");\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"login-form\" id=\"auth\" method=\"post\">\n          <p className=\"login-text\" />\n          <input\n            ref={this.inputLoginRef}\n            type=\"text\"\n            name=\"un\"\n            className=\"login-username\"\n            autoFocus\n            required\n            placeholder=\"Login\"\n            id=\"auth-login\"\n          />\n          <input\n            ref={this.inputPassRef}\n            type=\"password\"\n            name=\"pw\"\n            className=\"login-password\"\n            required\n            placeholder=\"Password\"\n            id=\"auth-pass\"\n          />\n          <input\n            type=\"submit\"\n            name=\"Login\"\n            value=\"Login\"\n            className=\"login-submit\"\n            id=\"auth-submit\"\n            onClick={e => this.execute_login(e)}\n          />\n        </form>\n        <a href=\"#\" className=\"login-forgot-pass\">\n          forgot password?\n        </a>\n        <div className=\"underlay-photo\" />\n        <div className=\"underlay-black\" />\n      </div>\n    );\n  }\n\n  execute_login(e) {\n    e.preventDefault();\n    console.log(\"handling\");\n    this.props.exec_login(\n      this.inputLoginRef.current.value,\n      this.inputPassRef.current.value\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loggedIn: state.login.loggedIn,\n  errorOccurred: state.login.errorOccurred,\n  user_id: state.login.user_id\n});\n\nexport default connect(\n  mapStateToProps,\n  { exec_login }\n)(Login);\n","import React, { Component } from \"react\";\nimport \"../css/buttons.css\";\nimport \"../css/login.css\";\nimport { exec_signup } from \"../actions/login\";\n\nimport { connect } from \"react-redux\";\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.inputLoginRef = React.createRef();\n    this.inputPassRef = React.createRef();\n    this.execute_signup = this.execute_signup.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.props.loggedIn\n      ? (window.location.href = \"/rooms\")\n      : console.log(\"Oops! Invalid Credentials\");\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"login-form\" id=\"auth\" method=\"post\">\n          <p className=\"login-text\" />\n          <input\n            ref={this.inputLoginRef}\n            type=\"text\"\n            name=\"un\"\n            className=\"login-username\"\n            autoFocus\n            required\n            placeholder=\"Login\"\n            id=\"auth-login\"\n          />\n          <input\n            ref={this.inputPassRef}\n            type=\"password\"\n            name=\"pw\"\n            className=\"login-password\"\n            required\n            placeholder=\"Password\"\n            id=\"auth-pass\"\n          />\n          <input\n            type=\"submit\"\n            name=\"Signup\"\n            value=\"Signup\"\n            className=\"login-submit\"\n            id=\"auth-submit\"\n            onClick={e => this.execute_signup(e)}\n          />\n        </form>\n        <a href=\"#\" className=\"login-forgot-pass\">\n          forgot password?\n        </a>\n        <div className=\"underlay-photo\" />\n        <div className=\"underlay-black\" />\n      </div>\n    );\n  }\n\n  execute_signup(e) {\n    e.preventDefault();\n    console.log(\"handling\");\n    this.props.exec_signup(\n      this.inputLoginRef.current.value,\n      this.inputPassRef.current.value\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loggedIn: state.login.loggedIn,\n  errorOccurred: state.login.errorOccurred,\n  user_id: state.login.user_id\n});\n\nexport default connect(\n  mapStateToProps,\n  { exec_signup }\n)(Signup);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\nimport Inputs from \"./components/Inputs\";\nimport Home from \"./components/Home\";\nimport RoomScreen from \"./components/RoomScreen\";\nimport \"./css/chat.css\";\n\n//==============\n//     RDX\n//==============\n\nimport { Provider } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { exec_login } from \"./actions/login\";\nimport { Router, Route, Link, Switch } from \"react-router-dom\";\nimport createHistory from \"history/createBrowserHistory\";\n\nimport store from \"./store\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div id=\"root\">\n          <Router history={createHistory()}>\n            <div>\n              <Switch>\n                <Route\n                  path=\"/\"\n                  component={\n                    store.getState().login.loggedIn ? RoomScreen : Home\n                  }\n                  exact\n                />\n                <Route path=\"/home\" component={Home} />\n                <Route path=\"/chat\" component={Chat} />\n                <Route path=\"/rooms\" component={RoomScreen} />\n                <Route path=\"/login\" component={Login} />\n                <Route path=\"/signup\" component={Signup} />\n              </Switch>\n            </div>\n          </Router>\n        </div>\n      </Provider>\n    );\n  }\n}\n// For Debugging Redux Store\n// store.subscribe(() => console.log(store.getState()));\nstore.subscribe(() => {\n  localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n});\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import { userInfo } from \"os\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}